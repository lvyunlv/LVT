#include "ELGLOffline/Range_Prover.h"
#include "ELGLOffline/Range_Verifier.h"
#include "ELGL/ELGL_Key.h"
#include "ELGL/Plaintext.h"

using namespace std;
int main(){
    BLS12381Element::init();
    ELGL_KeyPair key;
    key.generate();
    
    RangeProof proof(key.get_pk(), 65536);

    Plaintext plaintext;
    plaintext.set_random(proof.bound);
    
    ELGL_PK::Random_C r;
    r.setByCSPRNG();
    ELGL_PK pk = key.get_pk();
    std::map<Fp, Fr> P_to_m;
    // calculate y1 y3
    Ciphertext ciphertext = pk.encrypt(plaintext, r);

    // calculate y2 = g1^r * g^x
    vector<BLS12381Element> g1;
    BLS12381Element y2, tmp;
    g1.resize(proof.n_proofs);
    // claim g1
    g1[0] = BLS12381Element(5);
    
    y2 = g1[0] * r;

    tmp = BLS12381Element(plaintext.get_message());
    y2 += tmp;

    RangeProver prover(proof);
    octetStream ciphertexts, cleartexts;
    RangeProof::Randomness randomness;
    randomness.resize(proof.n_proofs);
    randomness[0] = r;

    vector<Ciphertext> vc;
    vc.resize(proof.n_proofs, Ciphertext());
    vc[0] = ciphertext;

    vector<BLS12381Element> vcc;
    vcc.resize(proof.n_proofs);
    vcc[0] = y2;

    vector<Plaintext> vp;
    vp.resize(proof.n_proofs, Plaintext());
    vp[0] = plaintext;

    prover.NIZKPoK(proof, ciphertexts, cleartexts, pk, g1, vc, vcc, vp, randomness);
    // verifier
    RangeVerifier verifier(proof);

    vector<Ciphertext> vc_;
    vc_.resize(proof.n_proofs, Ciphertext());

    vector<BLS12381Element> vcc_;
    vcc_.resize(proof.n_proofs);
    verifier.NIZKPoK(vc_, vcc_, ciphertexts, cleartexts, g1, pk);
    return 0;
}